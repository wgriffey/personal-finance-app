/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as PasswordResetImport } from './routes/password-reset'
import { Route as LoginImport } from './routes/login'
import { Route as AuthImport } from './routes/_auth'
import { Route as AuthTransactionsImport } from './routes/_auth/transactions'
import { Route as AuthSettingsImport } from './routes/_auth/settings'
import { Route as AuthLinkedAccountsImport } from './routes/_auth/linked-accounts'
import { Route as AuthInvestmentsImport } from './routes/_auth/investments'
import { Route as AuthDashboardImport } from './routes/_auth/dashboard'
import { Route as PasswordResetUidTokenImport } from './routes/password-reset/$uid.$token'
import { Route as ActivationUidTokenImport } from './routes/activation/$uid.$token'

// Create/Update Routes

const PasswordResetRoute = PasswordResetImport.update({
  id: '/password-reset',
  path: '/password-reset',
  getParentRoute: () => rootRoute,
} as any)

const LoginRoute = LoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const AuthRoute = AuthImport.update({
  id: '/_auth',
  getParentRoute: () => rootRoute,
} as any)

const AuthTransactionsRoute = AuthTransactionsImport.update({
  id: '/transactions',
  path: '/transactions',
  getParentRoute: () => AuthRoute,
} as any)

const AuthSettingsRoute = AuthSettingsImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => AuthRoute,
} as any)

const AuthLinkedAccountsRoute = AuthLinkedAccountsImport.update({
  id: '/linked-accounts',
  path: '/linked-accounts',
  getParentRoute: () => AuthRoute,
} as any)

const AuthInvestmentsRoute = AuthInvestmentsImport.update({
  id: '/investments',
  path: '/investments',
  getParentRoute: () => AuthRoute,
} as any)

const AuthDashboardRoute = AuthDashboardImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => AuthRoute,
} as any)

const PasswordResetUidTokenRoute = PasswordResetUidTokenImport.update({
  id: '/$uid/$token',
  path: '/$uid/$token',
  getParentRoute: () => PasswordResetRoute,
} as any)

const ActivationUidTokenRoute = ActivationUidTokenImport.update({
  id: '/activation/$uid/$token',
  path: '/activation/$uid/$token',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_auth': {
      id: '/_auth'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/password-reset': {
      id: '/password-reset'
      path: '/password-reset'
      fullPath: '/password-reset'
      preLoaderRoute: typeof PasswordResetImport
      parentRoute: typeof rootRoute
    }
    '/_auth/dashboard': {
      id: '/_auth/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof AuthDashboardImport
      parentRoute: typeof AuthImport
    }
    '/_auth/investments': {
      id: '/_auth/investments'
      path: '/investments'
      fullPath: '/investments'
      preLoaderRoute: typeof AuthInvestmentsImport
      parentRoute: typeof AuthImport
    }
    '/_auth/linked-accounts': {
      id: '/_auth/linked-accounts'
      path: '/linked-accounts'
      fullPath: '/linked-accounts'
      preLoaderRoute: typeof AuthLinkedAccountsImport
      parentRoute: typeof AuthImport
    }
    '/_auth/settings': {
      id: '/_auth/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof AuthSettingsImport
      parentRoute: typeof AuthImport
    }
    '/_auth/transactions': {
      id: '/_auth/transactions'
      path: '/transactions'
      fullPath: '/transactions'
      preLoaderRoute: typeof AuthTransactionsImport
      parentRoute: typeof AuthImport
    }
    '/activation/$uid/$token': {
      id: '/activation/$uid/$token'
      path: '/activation/$uid/$token'
      fullPath: '/activation/$uid/$token'
      preLoaderRoute: typeof ActivationUidTokenImport
      parentRoute: typeof rootRoute
    }
    '/password-reset/$uid/$token': {
      id: '/password-reset/$uid/$token'
      path: '/$uid/$token'
      fullPath: '/password-reset/$uid/$token'
      preLoaderRoute: typeof PasswordResetUidTokenImport
      parentRoute: typeof PasswordResetImport
    }
  }
}

// Create and export the route tree

interface AuthRouteChildren {
  AuthDashboardRoute: typeof AuthDashboardRoute
  AuthInvestmentsRoute: typeof AuthInvestmentsRoute
  AuthLinkedAccountsRoute: typeof AuthLinkedAccountsRoute
  AuthSettingsRoute: typeof AuthSettingsRoute
  AuthTransactionsRoute: typeof AuthTransactionsRoute
}

const AuthRouteChildren: AuthRouteChildren = {
  AuthDashboardRoute: AuthDashboardRoute,
  AuthInvestmentsRoute: AuthInvestmentsRoute,
  AuthLinkedAccountsRoute: AuthLinkedAccountsRoute,
  AuthSettingsRoute: AuthSettingsRoute,
  AuthTransactionsRoute: AuthTransactionsRoute,
}

const AuthRouteWithChildren = AuthRoute._addFileChildren(AuthRouteChildren)

interface PasswordResetRouteChildren {
  PasswordResetUidTokenRoute: typeof PasswordResetUidTokenRoute
}

const PasswordResetRouteChildren: PasswordResetRouteChildren = {
  PasswordResetUidTokenRoute: PasswordResetUidTokenRoute,
}

const PasswordResetRouteWithChildren = PasswordResetRoute._addFileChildren(
  PasswordResetRouteChildren,
)

export interface FileRoutesByFullPath {
  '': typeof AuthRouteWithChildren
  '/login': typeof LoginRoute
  '/password-reset': typeof PasswordResetRouteWithChildren
  '/dashboard': typeof AuthDashboardRoute
  '/investments': typeof AuthInvestmentsRoute
  '/linked-accounts': typeof AuthLinkedAccountsRoute
  '/settings': typeof AuthSettingsRoute
  '/transactions': typeof AuthTransactionsRoute
  '/activation/$uid/$token': typeof ActivationUidTokenRoute
  '/password-reset/$uid/$token': typeof PasswordResetUidTokenRoute
}

export interface FileRoutesByTo {
  '': typeof AuthRouteWithChildren
  '/login': typeof LoginRoute
  '/password-reset': typeof PasswordResetRouteWithChildren
  '/dashboard': typeof AuthDashboardRoute
  '/investments': typeof AuthInvestmentsRoute
  '/linked-accounts': typeof AuthLinkedAccountsRoute
  '/settings': typeof AuthSettingsRoute
  '/transactions': typeof AuthTransactionsRoute
  '/activation/$uid/$token': typeof ActivationUidTokenRoute
  '/password-reset/$uid/$token': typeof PasswordResetUidTokenRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/_auth': typeof AuthRouteWithChildren
  '/login': typeof LoginRoute
  '/password-reset': typeof PasswordResetRouteWithChildren
  '/_auth/dashboard': typeof AuthDashboardRoute
  '/_auth/investments': typeof AuthInvestmentsRoute
  '/_auth/linked-accounts': typeof AuthLinkedAccountsRoute
  '/_auth/settings': typeof AuthSettingsRoute
  '/_auth/transactions': typeof AuthTransactionsRoute
  '/activation/$uid/$token': typeof ActivationUidTokenRoute
  '/password-reset/$uid/$token': typeof PasswordResetUidTokenRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | ''
    | '/login'
    | '/password-reset'
    | '/dashboard'
    | '/investments'
    | '/linked-accounts'
    | '/settings'
    | '/transactions'
    | '/activation/$uid/$token'
    | '/password-reset/$uid/$token'
  fileRoutesByTo: FileRoutesByTo
  to:
    | ''
    | '/login'
    | '/password-reset'
    | '/dashboard'
    | '/investments'
    | '/linked-accounts'
    | '/settings'
    | '/transactions'
    | '/activation/$uid/$token'
    | '/password-reset/$uid/$token'
  id:
    | '__root__'
    | '/_auth'
    | '/login'
    | '/password-reset'
    | '/_auth/dashboard'
    | '/_auth/investments'
    | '/_auth/linked-accounts'
    | '/_auth/settings'
    | '/_auth/transactions'
    | '/activation/$uid/$token'
    | '/password-reset/$uid/$token'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  AuthRoute: typeof AuthRouteWithChildren
  LoginRoute: typeof LoginRoute
  PasswordResetRoute: typeof PasswordResetRouteWithChildren
  ActivationUidTokenRoute: typeof ActivationUidTokenRoute
}

const rootRouteChildren: RootRouteChildren = {
  AuthRoute: AuthRouteWithChildren,
  LoginRoute: LoginRoute,
  PasswordResetRoute: PasswordResetRouteWithChildren,
  ActivationUidTokenRoute: ActivationUidTokenRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/_auth",
        "/login",
        "/password-reset",
        "/activation/$uid/$token"
      ]
    },
    "/_auth": {
      "filePath": "_auth.tsx",
      "children": [
        "/_auth/dashboard",
        "/_auth/investments",
        "/_auth/linked-accounts",
        "/_auth/settings",
        "/_auth/transactions"
      ]
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/password-reset": {
      "filePath": "password-reset.tsx",
      "children": [
        "/password-reset/$uid/$token"
      ]
    },
    "/_auth/dashboard": {
      "filePath": "_auth/dashboard.tsx",
      "parent": "/_auth"
    },
    "/_auth/investments": {
      "filePath": "_auth/investments.tsx",
      "parent": "/_auth"
    },
    "/_auth/linked-accounts": {
      "filePath": "_auth/linked-accounts.tsx",
      "parent": "/_auth"
    },
    "/_auth/settings": {
      "filePath": "_auth/settings.tsx",
      "parent": "/_auth"
    },
    "/_auth/transactions": {
      "filePath": "_auth/transactions.tsx",
      "parent": "/_auth"
    },
    "/activation/$uid/$token": {
      "filePath": "activation/$uid.$token.tsx"
    },
    "/password-reset/$uid/$token": {
      "filePath": "password-reset/$uid.$token.tsx",
      "parent": "/password-reset"
    }
  }
}
ROUTE_MANIFEST_END */
